def add_contact(contacts):
    """Add a new contact to the list."""
    print("\n--- Add Contact ---")
    name = input("Enter name: ")
    phone = input("Enter phone number: ")  
    email = input("Enter email: ")  
    address = input("Enter address: ")
    # Create a dictionary for the new contact
    contact = {
        'name': name,
        'phone': phone,
        'email': email,
        'address': address
    }
    contacts.append(contact)  # Add the new contact to the list
    print(f"Contact '{name}' added.")  # Confirmation message

def view_contacts(contacts):
    """Display all saved contacts."""
    print("\n--- Contact List ---")
    if not contacts:
        print("No contacts found.")  # Message if no contacts exist
    else:
        for contact in contacts:
            # Print each contact's name and phone number
            print(f"{contact['name']} - {contact['phone']}")

def search_contacts(contacts):
    """Search for contacts by name or phone number."""
    search_term = input("Enter name or phone number to search: ")  # Prompt for search term
    found_contacts = [contact for contact in contacts if search_term in contact['name'] or search_term in contact['phone']]
    
    if found_contacts:
        print("\n--- Search Results ---")
        for contact in found_contacts:
            # Print matching contacts
            print(f"{contact['name']} - {contact['phone']}")
    else:
        print("No contacts found.")  # Message if no matches are found

def update_contact(contacts):
    """Update details of an existing contact."""
    name = input("Enter the name of the contact to update: ")  # Prompt for contact name
    # Find the contact by name
    contact = next((c for c in contacts if c['name'] == name), None)
    
    if contact:
        print("\nCurrent details:")
        print(f"Name: {contact['name']}, Phone: {contact['phone']}, Email: {contact['email']}, Address: {contact['address']}")
        
        # Prompt for new details, leaving current details if input is blank
        contact['phone'] = input("Enter new phone number (leave blank to keep current): ") or contact['phone']
        contact['email'] = input("Enter new email (leave blank to keep current): ") or contact['email']
        contact['address'] = input("Enter new address (leave blank to keep current): ") or contact['address']
        
        print(f"Contact '{name}' updated.")  # Confirmation message
    else:
        print("Contact not found.")  # Message if the contact does not exist

def delete_contact(contacts):
    """Delete a contact from the list."""
    name = input("Enter the name of the contact to delete: ")  # Prompt for contact name
    # Find the contact by name
    contact = next((c for c in contacts if c['name'] == name), None)
    
    if contact:
        contacts.remove(contact)  # Remove the contact from the list
        print(f"Contact '{name}' deleted.")  # Confirmation message
    else:
        print("Contact not found.")  # Message if the contact does not exist

def main():
    """Main function to run the contact book."""
    contacts = []  # Initialize an empty list to store contacts

    while True:
        print("\n--- Contact Book ---")
        print("1. Add Contact")
        print("2. View Contacts")
        print("3. Search Contact")
        print("4. Update Contact")
        print("5. Delete Contact")
        print("6. Exit")
        
        choice = input("Select an option (1-6): ")  # Prompt for menu choice
        
        if choice == '1':
            add_contact(contacts)  # Add a new contact
        elif choice == '2':
            view_contacts(contacts)  # View all contacts
        elif choice == '3':
            search_contacts(contacts)  # Search for a contact
        elif choice == '4':
            update_contact(contacts)  # Update an existing contact
        elif choice == '5':
            delete_contact(contacts)  # Delete a contact
        elif choice == '6':
            print("Exiting the Contact Book.")  # Exit message
            break  # Exit the loop
        else:
            print("Invalid option. Please try again.")  # Error message for invalid input

if __name__ == "__main__":
    main()  # Run the main function




